!function(){"use strict";const s=["client/about.038eea4e.js","client/index.1aa43628.js","client/Card.3934eb4f.js","client/index.54bcc8af.js","client/index.a013ad2b.js","client/index.2b624af8.js","client/index.79dab58d.js","client/home.efbecddb.js","client/[slug].1226b8dd.js","client/categories.3ec412ad.js","client/client.a2539678.js","client/products.6db12646.js","client/index.de53ddf9.js"].concat(["service-worker-index.html","favicon.png","fonts/fira-mono/fira-mono-latin-400.woff2","fonts/overpass/overpass-latin-100.woff2","fonts/overpass/overpass-latin-300.woff2","fonts/overpass/overpass-latin-400.woff2","fonts/overpass/overpass-latin-600.woff2","fonts/overpass/overpass-latin-700.woff2","fonts/roboto/roboto-latin-400.woff2","fonts/roboto/roboto-latin-400italic.woff2","fonts/roboto/roboto-latin-500.woff2","fonts/roboto/roboto-latin-500italic.woff2","global.css","great-success.png","icons/arrow-right.svg","icons/check.svg","icons/chevron.svg","icons/collapse.svg","icons/download.svg","icons/dropdown.svg","icons/edit.svg","icons/expand.svg","icons/flip.svg","icons/fork.svg","icons/link.svg","icons/loading.svg","icons/save.svg","images/sapper-android-chrome-192.png","images/sapper-android-chrome-512.png","images/sapper-apple-touch-icon.png","images/sapper-mstile-150.png","logo-192.png","logo-512.png","manifest.json","prism.css","sapper-logo-horizontal.svg","sapper-logo-outline.svg","sapper-logo-vertical.svg","sapper-logo.svg","sapper-logotype.svg"]),e=new Set(s);self.addEventListener("install",e=>{e.waitUntil(caches.open("cache1566952828062").then(e=>e.addAll(s)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",s=>{s.waitUntil(caches.keys().then(async s=>{for(const e of s)"cache1566952828062"!==e&&await caches.delete(e);self.clients.claim()}))}),self.addEventListener("fetch",s=>{if("GET"!==s.request.method||s.request.headers.has("range"))return;const o=new URL(s.request.url);o.protocol.startsWith("http")&&(o.hostname===self.location.hostname&&o.port!==self.location.port||(o.host===self.location.host&&e.has(o.pathname)?s.respondWith(caches.match(s.request)):"only-if-cached"!==s.request.cache&&s.respondWith(caches.open("offline1566952828062").then(async e=>{try{const o=await fetch(s.request);return e.put(s.request,o.clone()),o}catch(o){const t=await e.match(s.request);if(t)return t;throw o}}))))})}();
